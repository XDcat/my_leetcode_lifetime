# -*- coding:utf-8 -*-
"""
__author__ = 'XD'
__mtime__ = 2020/9/21
__project__ = my_leetcode_lifetime
Fix the Problem, Not the Blame.
"""


class Solution(object):
    def findMaxForm(self, strs, m, n):
        """
        01背包问题
        :type strs: List[str]
        :type m: int
        :type n: int
        :rtype: int
        """
        N = len(strs)
        # 三维背包 bags[i][j][k] 表示将前i个物品放进有j个1，k个0的的背包
        bags = [[[0] * (m + 1) for i in range(n + 1)] for j in range(N + 1)]
        strs = [0] + strs
        for i in range(1, N + 1):
            for j in range(0, n + 1):
                for k in range(0, m + 1):
                    count_0 = strs[i].count("0")
                    count_1 = strs[i].count("1")
                    if j >= count_1 and k >= count_0:
                        bags[i][j][k] = max(bags[i - 1][j][k], bags[i - 1][j - count_1][k - count_0] + 1)
                    else:
                        bags[i][j][k] = bags[i - 1][j][k]
        return bags[-1][-1][-1]


if __name__ == '__main__':
    # strs = ["10", "0001", "111001", "1", "0"]
    # m = 5
    # n = 3
    strs = ["1101", "0101", "01", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
            "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101"]
    m = 66
    n = 26
    res = Solution().findMaxForm(strs, m, n)
    print(res)
